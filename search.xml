<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Charles Capture</title>
      <link href="/2020/10/03/charles-capture/"/>
      <url>/2020/10/03/charles-capture/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/charles/charles_launch.png"></p><p>在进行 App 的开发过程中，时常需要通过抓包来帮助定位问题。通过抓包，可以了解到请求体，响应体，header， 耗时等等信息。这里记录下用 Charles 抓取 App 数据的过程。</p><a id="more"></a> <h3 id="Charles-下载及安装"><a href="#Charles-下载及安装" class="headerlink" title="Charles 下载及安装"></a>Charles 下载及安装</h3><p><code>Charles</code> <a href="https://www.charlesproxy.com/latest-release/download.do">下载地址</a>，可以更加操作系统下载对应的版本。</p><p>下载完成之后，根据提示安装即可。</p><h3 id="Proxy-设置"><a href="#Proxy-设置" class="headerlink" title="Proxy 设置"></a>Proxy 设置</h3><p><img src="/images/charles/charles_proxy_setting.png"></p><p>设置 Charles 为代理服务器后，通过抓取到流经代理服务器的数据，来分析相应的请求。</p><p>启动 Charles 后，在 <code>Proxy</code> -&gt; <code>Proxy Setting</code> 里设置代理服务器的参数，例如：端口号，默认不需要进行过多的设置。</p><p>在 Proxy Setting 也可以直接开启 <code>Mac OS Proxy</code>。开启之后，就可以抓取本机上的网络请求。</p><h3 id="抓取-App-网络请求"><a href="#抓取-App-网络请求" class="headerlink" title="抓取 App 网络请求"></a>抓取 App 网络请求</h3><p><img src="/images/charles/charles_local_address.png"></p><p>首先在 <code>Charles</code> -&gt; <code>Help</code> -&gt; <code>Local Address</code> 查看代理服务器的地址；</p><p>然后在手机端的网络里设置代理服务器地址及端口号，地址可以从<code>Local Address</code>里找到，端口号可以从 <code>Proxy Setting</code>里找到，默认为 8888 。</p><h3 id="抓取-HTTPS-网络请求"><a href="#抓取-HTTPS-网络请求" class="headerlink" title="抓取 HTTPS 网络请求"></a>抓取 HTTPS 网络请求</h3><p>经过以上设置只有，可以抓取到电脑或者手机端的网络请求。不过有些请求是HTTPS加密的，这就需要在电脑或者手机上安装证书以及在 Charles 开启 <code>SSL Proxying</code>。</p><p>以手机端为例安装证书</p><p>在手机端浏览器(Safari)打开<a href="chls.pro/ssl">chls.pro/ssl</a>，根据提示下载安装证书；</p><p>下载完成之后，证书会显示在<code>描述文件</code>里， 点击安装证书；</p><p><img src="/images/charles/charles_cert_setting2.png"></p><p>安装之后，需要在 <code>通用</code>-&gt; <code>关于本机</code> -&gt; <code>证书信任设置</code> 里信任证书。</p><p><img src="/images/charles/charles_cert_setting1.png"></p><p>不同版本的 iOS 可能略有不同，仅供参考。</p><h3 id="开启-SSL-Proxying"><a href="#开启-SSL-Proxying" class="headerlink" title="开启 SSL Proxying"></a>开启 SSL Proxying</h3><p><img src="/images/charles/charles_ssl_proxy_setting.png"></p><p>手机端安装完成证书之后，还需要在 Charles 里开启 <code>SSL Proxying</code>。</p><p>在 <code>Proxy</code> -&gt; <code>SSL Proxy Setting</code> 里 添加需要 SSL 代理的站点，点击保存即可。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>经过以上设置之后，就可以在 Charles 里解析到 HTTPS 的请求及响应。</p><p>注意：移动端如果开启了 VPN， 代理设置无效，就不能抓包，关闭 VPN 即可。</p><p>参考：<a href="https://juejin.im/post/6844903640272994317#heading-3">史上最强 Charles 抓包</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Charles </tag>
            
            <tag> Capture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUnit 5 User Guide Note</title>
      <link href="/2020/09/26/junit5-user-guide-note/"/>
      <url>/2020/09/26/junit5-user-guide-note/</url>
      
        <content type="html"><![CDATA[<p>在项目里使用JUnit写单元测试的时候，时常遇到一个注解在不同的包里都定义了，例如<code>@Test</code>可能来自于<code>org.junit.Test</code>，也可能来自于<code>org.junit.jupiter.api.Test</code>。有时候总是有些迷惑，在查看了JUnit5的用户文档以及其他关于JUnit5的介绍之后，有了一些理解，这里记录一下，加深印象。</p><a id="more"></a><h2 id="JUnit-5"><a href="#JUnit-5" class="headerlink" title="JUnit 5"></a>JUnit 5</h2><p><code>JUnit5</code>是由多个模块组成的。</p><blockquote><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p></blockquote><p><code>JUnit Platform</code>是测试框架在 JVM 上启动的基础。它还定义了<code>TestEngine</code>的API，可以用来开发基于 Platform 的测试框架。</p><p><code>JUnit Jupiter</code>是<code>JUnit5</code>中用来编写测试以及扩展的编程模型及扩展模型的集合。<code>Jupiter</code>的子项目还提供了运行<code>Jupiter</code>测试的<code>TestEngine</code>。</p><p><code>JUnit Vintage</code>提供兼容以往基于<code>JUnit3</code>, <code>JUint4</code>版本的测试引擎。</p><p><a href="https://junit.org/junit5/docs/current/user-guide/">JUnit5 User Guide</a></p><h2 id="org-junit-jupiter-api-Test-与-org-junit-Test"><a href="#org-junit-jupiter-api-Test-与-org-junit-Test" class="headerlink" title="org.junit.jupiter.api.Test 与 org.junit.Test"></a>org.junit.jupiter.api.Test 与 org.junit.Test</h2><p><code>org.junit.Test</code> 是 JUnit5 之前所使用的注解，来自于<code>JUnit Vintage</code>模块。<code>org.junit.jupiter.api.Test</code> 是 JUnit5 新增的注解，来源于<code>JUnit Jupiter</code>模块。</p><p>如果项目使用的是Junit5 的来进行单元测试，那么为了避免在编写单元测试时产生疑惑或者不必要的选择，可以排除<code>JUnit Vintage</code>，还可以排除<code>junit:junit</code>。</p><p>以下是排除方法，并没有实际测试，待验证。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testImplementation(<span class="string">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">exclude</span>(<span class="string">&quot;org.junit.vintage:junit-vintage-engine&quot;</span>)</span><br><span class="line">    <span class="keyword">exclude</span>(<span class="string">&quot;junit:junit&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ExtendWith"><a href="#ExtendWith" class="headerlink" title="@ExtendWith"></a>@ExtendWith</h2><p><code>@ExtendWith</code> 是 <code>@RunWith</code>的进化。</p><p>MockitoExtension 与 MockitoJUnitRunner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="meta">@ExtendWith(MockitoExtension.class)</span> <span class="comment">// JUnit 5</span></span><br><span class="line"><span class="meta">@RunWith(MockitoJUnitRunner.class)</span> <span class="comment">// JUnit 4</span></span><br></pre></td></tr></table></figure><p>SpringExtension 与 SpringJUnit4ClassRunner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span> <span class="comment">// JUnit 5</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">// JUnit 4</span></span><br></pre></td></tr></table></figure><p><code>MockitoExtension</code> 与 <code>SpringExtension</code></p><p> MockitoExtension 主要用来 <code>@Mock</code>和<code>@InjectMocks</code>这样的注解，它不会加载到很多不需要的 Spring 组件。 SpringExtension 则额外支持了<code>@MockBean</code>的注解，它会加载 Spring 运行所需要的一些组件。</p><p>一般在不需要 Spring 容器配合完成单元测试的情况下，使用<code>MockitoExtension</code>即可，这样启动速度会相对快一些。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JUnit5 </tag>
            
            <tag> JUnit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Skills</title>
      <link href="/2020/09/25/vim-skills/"/>
      <url>/2020/09/25/vim-skills/</url>
      
        <content type="html"><![CDATA[<p>虽然现在有很多优秀的文本编辑器，但在一些时候还是会用到<code>Vim</code>，比如<code>Termial</code>或者<code>iTerm</code>里，由于并不是一个<code>Vim</code>的熟手，经常会遇到知道某功能但想不起来具体指令的时候。</p><p>这里并没有囊括所有的指令或者完整的<code>Vim</code>使用技巧，而是做一下简单记录，方便用到的时候查找。</p><a id="more"></a><h3 id="Vim-键盘图"><a href="#Vim-键盘图" class="headerlink" title="Vim 键盘图"></a>Vim 键盘图</h3><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif"></p><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><table><thead><tr><th>功能</th><th>命令</th><th>备注</th></tr></thead><tbody><tr><td>复制当前行</td><td>yy</td><td></td></tr><tr><td>删除当前行</td><td>dd</td><td></td></tr><tr><td>删除当前行向后n行</td><td>ndd</td><td>包括当前行</td></tr><tr><td>删除当前行至最后一行</td><td>dG</td><td></td></tr><tr><td>删除当前行至第一行</td><td>d1G</td><td></td></tr><tr><td>向前删除一个字符</td><td>X</td><td>类似 backspace</td></tr><tr><td>向后删除一个字符</td><td>x</td><td>类似 del</td></tr><tr><td>先后删除n个字符</td><td>nX</td><td></td></tr><tr><td>粘贴至当前行的上一行</td><td>P</td><td></td></tr><tr><td>粘贴至当前行的下一行</td><td>p</td><td></td></tr><tr><td>重复前一个动作</td><td>.</td><td></td></tr><tr><td>重做上一个动作</td><td>Ctrl + r</td><td></td></tr><tr><td>撤销</td><td>u</td><td></td></tr><tr><td>行首</td><td>0</td><td>或者 Home</td></tr><tr><td>行尾</td><td>$</td><td>或者 End</td></tr><tr><td>首行</td><td>gg</td><td>或者1G</td></tr><tr><td>最后一行</td><td>G</td><td></td></tr><tr><td>屏幕中央的一行</td><td>M</td><td></td></tr><tr><td>第 n 行</td><td>nG</td><td></td></tr><tr><td>向下移动n行</td><td>n + Enter</td><td></td></tr><tr><td>下一页</td><td>Ctrl + f</td><td></td></tr><tr><td>上一页</td><td>Ctrl + b</td><td></td></tr><tr><td>向下半页</td><td>Ctrl + d</td><td></td></tr><tr><td>向上半页</td><td>Ctrl + u</td><td></td></tr><tr><td>向下搜索</td><td>/word</td><td>word 为搜索的内容</td></tr><tr><td>想前搜索</td><td>?word</td><td></td></tr><tr><td>下一个搜索结果</td><td>n</td><td></td></tr><tr><td>上一个搜索结果</td><td>N</td><td></td></tr><tr><td>合并当前行和下一行为一行</td><td>J</td><td></td></tr><tr><td>保存并退出</td><td>ZZ</td><td></td></tr><tr><td>不保存退出</td><td>ZQ</td><td></td></tr><tr><td>显示行号</td><td>:set nu</td><td></td></tr><tr><td>取消显示行号</td><td>:set nonu</td><td></td></tr></tbody></table><p>参考：<a href="https://www.runoob.com/linux/linux-vim.html">Linux vi/vim</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPath Exapmles</title>
      <link href="/2020/09/20/xpath-exapmles/"/>
      <url>/2020/09/20/xpath-exapmles/</url>
      
        <content type="html"><![CDATA[<p>前一段时间在写 <a href="http://www.mbtest.org/">MountBank</a> 相关的 Predicates 的时候，用到了<code>XPath</code>的语法，有些语法模仿已有的 case 可以很好的完成，但有些特殊一点的 case 就需要自己思考如何实现。在网上搜索的时候看到了 <a href="https://www.freeformatter.com/xpath-tester.html#ad-output">Freeformatter</a> 这个站点，可以用来 <code>XPath Tester</code>/ <code>Evaluator</code> ，也有一些<code>XPath</code>的语法参考。</p><a id="more"></a><ol><li><p>Select the document node</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/</span><br></pre></td></tr></table></figure></li><li><p>Select the ‘root’ element</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root</span><br></pre></td></tr></table></figure></li><li><p>Select all ‘actor’ elements that are direct children of the ‘actors’ element.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/actors/actor</span><br></pre></td></tr></table></figure></li><li><p>Select all ‘singer’ elements regardless of their positions in the document.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//foo:singer</span><br></pre></td></tr></table></figure></li><li><p>Select the ‘id’ attributes of the ‘singer’ elements regardless of their positions in the document.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//foo:singer/<span class="built_in">@id</span></span><br></pre></td></tr></table></figure></li><li><p>Select the textual value of first ‘actor’ element.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//actor[<span class="number">1</span>]/<span class="type">text</span>()</span><br></pre></td></tr></table></figure></li><li><p>Select the last ‘actor’ element.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//actor<span class="built_in">[last</span>()]</span><br></pre></td></tr></table></figure></li><li><p>Select the first and second ‘actor’ elements using their position.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//actor<span class="built_in">[position</span>() &lt; <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>Select all ‘actor’ elements that have an ‘id’ attribute.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//actor[<span class="built_in">@id</span>]</span><br></pre></td></tr></table></figure></li><li><p>Select the ‘actor’ element with the ‘id’ attribute value of ‘3’.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//actor[<span class="built_in">@id</span>=<span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>Select all ‘actor’ nodes with the ‘id’ attribute value lower or equal to ‘3’.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//actor[<span class="built_in">@id</span>&lt;=<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>Select all the children of the ‘singers’ node.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/foo:singers/*</span><br></pre></td></tr></table></figure></li><li><p>Select all the elements in the document.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//*</span><br></pre></td></tr></table></figure></li><li><p>Select all the ‘actor’ elements AND the ‘singer’ elements.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//actor|//foo:singer</span><br></pre></td></tr></table></figure></li><li><p>Select the name of the first element in the document.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name(//*[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li><li><p>Select the numeric value of the ‘id’ attribute of the first ‘actor’ element.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number(//actor[<span class="number">1</span>]/<span class="built_in">@id</span>)</span><br></pre></td></tr></table></figure></li><li><p>Select the string representation value of the ‘id’ attribute of the first ‘actor’ element.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(//actor[<span class="number">1</span>]/<span class="built_in">@id</span>)</span><br></pre></td></tr></table></figure></li><li><p>Select the length of the first ‘actor’ element’s textual value.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string-length(//actor[<span class="number">1</span>]/<span class="type">text</span>())</span><br></pre></td></tr></table></figure></li><li><p>Select the local name of the first ‘singer’ element, i.e. without the namespace.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local-name(//foo:singer[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li><li><p>Select the number of ‘singer’ elements.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(//foo:singer)</span><br></pre></td></tr></table></figure></li><li><p>Select the sum of the ‘id’ attributes of the ‘singer’ elements.</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(//foo:singer/<span class="built_in">@id</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Skills Notes</title>
      <link href="/2020/09/20/skills-notes/"/>
      <url>/2020/09/20/skills-notes/</url>
      
        <content type="html"><![CDATA[<p>这里主要用来记录一下开发过程中学习到的零散知识点或者是软件的使用技巧。先将点放在这里做草稿，等同一类型收集到一定程度，或者要对某一部分做整理时，再转移到其他更合适的位置。</p><p>目前有<code>Git</code>,<code>Spring</code>的一些点。</p><a id="more"></a><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="git-切换分支"><a href="#git-切换分支" class="headerlink" title="git 切换分支"></a>git 切换分支</h3><h4 id="在建立本地分支，指定所对应的远程分支"><a href="#在建立本地分支，指定所对应的远程分支" class="headerlink" title="在建立本地分支，指定所对应的远程分支"></a>在建立本地分支，指定所对应的远程分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><h4 id="在本地建立分支，以当前所在分支为基础-如果不指定远程分支"><a href="#在本地建立分支，以当前所在分支为基础-如果不指定远程分支" class="headerlink" title="在本地建立分支，以当前所在分支为基础(如果不指定远程分支)"></a>在本地建立分支，以当前所在分支为基础(如果不指定远程分支)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br></pre></td></tr></table></figure><h4 id="查看-project-有多少个分支"><a href="#查看-project-有多少个分支" class="headerlink" title="查看 project 有多少个分支"></a>查看 project 有多少个分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a // --all 本地和远程的所有分支</span><br><span class="line">$ git branch -r // --remote 远程的所有分支</span><br><span class="line">$ git branch -l // --list 本地所有分支</span><br><span class="line">$ git branch -v // --verbose 本地分支（输出最后一次提交信息）</span><br></pre></td></tr></table></figure><hr><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="Spring-CommandLineRunner-amp-ApplicationRunner"><a href="#Spring-CommandLineRunner-amp-ApplicationRunner" class="headerlink" title="Spring CommandLineRunner &amp; ApplicationRunner"></a>Spring <code>CommandLineRunner</code> &amp; <code>ApplicationRunner</code></h3><p>当在 Spring boot 启动后，做一些初始化操作，可以使用<code>CommandLineRunner</code>这个接口。<br><code>CommandLineRunner</code>接口的 Component 会在所有 Beans 都初始化之后，SpringApplication.run() 之前执行。</p><blockquote><p>Interface used to indicate that a bean should run when it is contained within a SpringApplication. Multiple CommandLineRunner beans can be defined within the same application context and can be ordered using the Ordered interface or Order @Order annotation.</p></blockquote><p><code>ApplicationRunner</code>做的事情和<code>CommandLineRunner</code>基本一致，区别在接收的参数的不同，<code>ApplicationRunner</code>接收的参数经过了 Spring 的处理，操作起来更简单直观。<code>--a=b</code> 形式的参数，可以直接通过使用<code>getOptionNames()</code>获取参数名，以及<code>getOptionValues(&quot;xxx&quot;)</code>获取对应的value。而<code>CommandLineRunner</code>接收的参数就是原始输出，需要自己去解析。</p><blockquote><p>If you need access to ApplicationArguments instead of the raw String array consider using ApplicationRunner.</p></blockquote><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Skills</title>
      <link href="/2020/09/13/sublime-skills/"/>
      <url>/2020/09/13/sublime-skills/</url>
      
        <content type="html"><![CDATA[<p>Sublime 的使用主要是一些快捷键的记录。当快捷键使用的熟练之后，很多操作都非常的方便，Sublime 用起来也更得心应手。</p><a id="more"></a><h4 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h4><h4 id="相同内容选中"><a href="#相同内容选中" class="headerlink" title="相同内容选中"></a>相同内容选中</h4><h4 id="重复行去除"><a href="#重复行去除" class="headerlink" title="重复行去除"></a>重复行去除</h4><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><h4 id="依次选中相同内容"><a href="#依次选中相同内容" class="headerlink" title="依次选中相同内容"></a>依次选中相同内容</h4><h4 id="前后行交换位置"><a href="#前后行交换位置" class="headerlink" title="前后行交换位置"></a>前后行交换位置</h4><h4 id="复制当前行至新的一行"><a href="#复制当前行至新的一行" class="headerlink" title="复制当前行至新的一行"></a>复制当前行至新的一行</h4>]]></content>
      
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gatling - Load testing</title>
      <link href="/2020/09/12/gatling-load-testing/"/>
      <url>/2020/09/12/gatling-load-testing/</url>
      
        <content type="html"><![CDATA[<p>对于软件开发，性能测试并不陌生。如果是新上线的系统，为了评估它能不能应对未来的线上请求，我们需要测试它的性能；对于已有的系统，我们在预估未来会有更多流量时，它能否扛的住，我们需要测试它的性能；如果是进行系统的性能优化，那么性能是否有提升或者说提升了多少，也需要性能测试等等。</p><p>当然，有很多其他场景需要性能测试，各种测试策略也都不尽相同，这里简单记录下开发过程中进行的性能测试，讲述如何使用<code>Gatling</code>来完成性能测试。</p><a id="more"></a><h2 id="为什么要做压力测试"><a href="#为什么要做压力测试" class="headerlink" title="为什么要做压力测试"></a>为什么要做压力测试</h2><ol><li>评估系统的能力</li><li>验证系统的稳定性和可靠性</li><li>对比，确认性能优化是否有效及程度</li><li>瓶颈</li></ol><h2 id="Gatling"><a href="#Gatling" class="headerlink" title="Gatling"></a>Gatling</h2><h3 id="Gatling-的优势"><a href="#Gatling-的优势" class="headerlink" title="Gatling 的优势"></a>Gatling 的优势</h3><p>Gatling的高性能保证：<code>Scala</code>,<code>Akka</code>,<code>Netty</code><br><code>Html Report</code> 使得输出的报告更易读和共享<br><code>DSL (domain-specific language)</code> 面向压测，使<code>inject</code>的问题简单明了。</p><h3 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h3><p>Gatling中有几个术语：<code>Simulation</code>, <code>Scenario</code>, <code>Group</code>, <code>Request</code>, <code>Injection Profile</code></p><p><img src="/images/gatling_terminology.png"></p><h4 id="Simulation"><a href="#Simulation" class="headerlink" title="Simulation"></a><code>Simulation</code></h4><p>当写 script 时，都需要继承的接口，是测试脚本的基础</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicSimulation</span> <span class="keyword">extends</span> <span class="title">Simulation</span> </span>&#123;</span><br><span class="line">  val httpConf = http</span><br><span class="line">    .baseURL(<span class="string">&quot;http://computer-database.gatling.io&quot;</span>)</span><br><span class="line">    .acceptHeader(<span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>)</span><br><span class="line">    .doNotTrackHeader(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    .acceptLanguageHeader(<span class="string">&quot;en-US,en;q=0.5&quot;</span>)</span><br><span class="line">    .acceptEncodingHeader(<span class="string">&quot;gzip, deflate&quot;</span>)</span><br><span class="line">    .userAgentHeader(<span class="string">&quot;Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">  val scn = scenario(<span class="string">&quot;BasicSimulation&quot;</span>)</span><br><span class="line">    .exec(http(<span class="string">&quot;request_1&quot;</span>)</span><br><span class="line">    .get(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">    .pause(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  setUp(</span><br><span class="line">    scn.inject(atOnceUsers(<span class="number">1</span>))</span><br><span class="line">  ).protocols(httpConf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a><code>Scenario</code></h4><p><code>Scenario</code> 是 <code>Group</code> 的编排，可用于模拟真实的行为。配合<code>Injection Profile</code>使用，设定压测时间，压测并发用户等等参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val scn = scenario(<span class="string">&quot;BasicSimulation&quot;</span>)</span><br><span class="line">  .exec(http(<span class="string">&quot;request_1&quot;</span>)</span><br><span class="line">  .get(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">  .pause(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">setUp(</span><br><span class="line">  scn.inject(atOnceUsers(<span class="number">1</span>))</span><br><span class="line">).protocols(httpConf)</span><br></pre></td></tr></table></figure><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a><code>Group</code></h4><p><code>Group</code> 是多个 <code>Request</code> 的合集，例如一个界面上设计的多个接口的调用，可以用 <code>Group</code> 组织在一起。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec(http(<span class="string">&quot;request_1&quot;</span>)</span><br><span class="line">  .get(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">  .pause(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a><code>Request</code></h4><p><code>Request</code> 可以理解为 Script 的基本单元，对应每一个请求或者API。</p><h4 id="Inject-Profile"><a href="#Inject-Profile" class="headerlink" title="Inject Profile"></a><code>Inject Profile</code></h4><p><code>Inject Profile</code> 采用 DSL 语言，简单明了，可以自由组合。<br><code>Inject Profile</code> 有两种模式 ： <code>Open Mode</code> 和 <code>Close Mode</code>。 对比之下，<code>Open Mode</code> 主要是定义单位时间新增的用户，<code>Close Mode</code> 主要用于设置并发用户数。</p><blockquote><p><code>open workload model</code>: you define the arrival rate of new virtual users; number of concurrent users inside the system is a consequence of the response times and the journey duration and you have no control over it<br><code>closed workload model</code>: you define the number of concurrent users effectively inside the system; arrival rate is a consequence and you have no control over it</p></blockquote><p><code>Open Mode</code> 可能会导致系统内同时在线的用户或者说并发用户数不可控。 <code>Close Mode</code> 设定的就是系统中固定的用户数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setUp(</span><br><span class="line">  scn.inject(atOnceUsers(<span class="number">1</span>))</span><br><span class="line">).protocols(httpConf)</span><br></pre></td></tr></table></figure><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><p><a href="https://gatling.io/docs/current/general/scenario/#conditional-statements"><code>Conditional statements</code></a></p><h4 id="doIf"><a href="#doIf" class="headerlink" title="doIf"></a>doIf</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doIf(<span class="string">&quot;$&#123;myBoolean&#125;&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// executed if the session value stored in &quot;myBoolean&quot; is true</span></span><br><span class="line">  exec(http(<span class="string">&quot;...&quot;</span>).get(<span class="string">&quot;...&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用：当 <code>Session</code> 中的 <code>tokenId</code> 为空时，打印出 <code>Session</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doIf(session =&gt; session(<span class="string">&quot;tokenId&quot;</span>).asOption[String].isEmpty) &#123;</span><br><span class="line">  exec &#123; session =&gt;</span><br><span class="line">    println(<span class="string">&quot;Smoke process - Login&quot;</span>, session)</span><br><span class="line">    session</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doIfEquals"><a href="#doIfEquals" class="headerlink" title="doIfEquals"></a>doIfEquals</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doIfEquals(<span class="string">&quot;$&#123;actualValue&#125;&quot;</span>, <span class="string">&quot;expectedValue&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// executed if the session value stored in &quot;actualValue&quot; is equal to &quot;expectedValue&quot;</span></span><br><span class="line">  exec(http(<span class="string">&quot;...&quot;</span>).get(<span class="string">&quot;...&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doIfOrElse"><a href="#doIfOrElse" class="headerlink" title="doIfOrElse"></a>doIfOrElse</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doIfOrElse(session =&gt; session(<span class="string">&quot;myKey&quot;</span>).as[String].startsWith(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// executed if the session value stored in &quot;myKey&quot; starts with &quot;admin&quot;</span></span><br><span class="line">  exec(http(<span class="string">&quot;if true&quot;</span>).get(<span class="string">&quot;...&quot;</span>))</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="comment">// executed if the session value stored in &quot;myKey&quot; does not start with &quot;admin&quot;</span></span><br><span class="line">  exec(http(<span class="string">&quot;if false&quot;</span>).get(<span class="string">&quot;...&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Gatling-报告分析"><a href="#Gatling-报告分析" class="headerlink" title="Gatling 报告分析"></a>Gatling 报告分析</h2><h3 id="响应时间分布柱状图"><a href="#响应时间分布柱状图" class="headerlink" title="响应时间分布柱状图"></a>响应时间分布柱状图</h3><p>统计请求响应时间分布以及失败请求的数量<br><img src="/images/gatling_requests_response_time_preview.png"></p><h3 id="各请求响应图表"><a href="#各请求响应图表" class="headerlink" title="各请求响应图表"></a>各请求响应图表</h3><p>统计各个API的响应时间，例如：50%，75%，95%，99% 的请求在多少ms内完成。<br><img src="/images/gatling_requests_response_time_statistic.png"></p><h3 id="Active-users"><a href="#Active-users" class="headerlink" title="Active users"></a>Active users</h3><p>在测试期间，各时间点上，活跃的用户数统计<br><img src="/images/gatling_active_users.png"></p><h3 id="详细响应时间分布"><a href="#详细响应时间分布" class="headerlink" title="详细响应时间分布"></a>详细响应时间分布</h3><p>测试过程中，请求的响应时间分布情况<br><img src="/images/gatling_response_time_distribution.png"></p><h3 id="Active-users-与-响应时间-对照"><a href="#Active-users-与-响应时间-对照" class="headerlink" title="Active users 与 响应时间 对照"></a>Active users 与 响应时间 对照</h3><p><code>Active users</code> 和 响应时间 的详细对照<br><img src="/images/gatling_active_users_response_distribution.png"></p><h2 id="监控工具"><a href="#监控工具" class="headerlink" title="监控工具"></a>监控工具</h2><p>在做性能测试的时候，监控是不能少的。</p><h3 id="Sleuth-Spring-Cloud-Sleuth"><a href="#Sleuth-Spring-Cloud-Sleuth" class="headerlink" title="Sleuth (Spring Cloud Sleuth)"></a>Sleuth (Spring Cloud Sleuth)</h3><p><a href="https://spring.io/projects/spring-cloud-sleuth"><code>Sleuth</code></a>用来追溯请求在各个服务之间的流转。每个请求有唯一的traceId，在不同的服务之间也会有不同的spanId，这些信息可以帮助查看请求在整个链路中的调用以及耗时情况。</p><h3 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h3><p><a href="https://zipkin.io/"><code>Zipkin</code></a>和<code>Sleuth</code>搭配使用，是将<code>Sleuth</code>上报的链路信息可视化。</p><p><img src="/images/gatling_zipkin_preview.png"></p><h3 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h3><p><a href="https://prometheus.io/"><code>Prometheus</code></a>用来监控 pod 上的资源使用情况，还能够统计分析 pod 处理的请求。</p><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><p><a href="https://grafana.com/"><code>Grafana</code></a>是将<code>Prometheus</code>统计的信息可视化。<br><img src="/images/gatling_grafana_preview.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Gatling </tag>
            
            <tag> Performance Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Skills</title>
      <link href="/2020/09/10/kotlin-skills/"/>
      <url>/2020/09/10/kotlin-skills/</url>
      
        <content type="html"><![CDATA[<p>去年底的时候，有一个项目是以<code>Kotlin</code>为基础来开发的，也是我第一次接触这个语言。在开发过程中也有一些觉得有意思的点，这里记录下来，方便后期的查阅和回顾。</p><a id="more"></a><h2 id="1-functions-as-parameters-（函数作为入参）"><a href="#1-functions-as-parameters-（函数作为入参）" class="headerlink" title="1. functions as parameters （函数作为入参）"></a>1. functions as parameters （函数作为入参）</h2><p>假设有两个数，要将他们合并为一个数，合并的方式不同，此时就可以使用函数入参的方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> Collection<span class="type">&lt;T&gt;</span>.<span class="title">fold</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    initial: <span class="type">R</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    combine: (<span class="type">acc</span>: <span class="type">R</span>, <span class="type">nextElement</span>: <span class="type">T</span>) -&gt; <span class="type">R</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: R &#123;</span><br><span class="line">    <span class="keyword">var</span> accumulator: R = initial</span><br><span class="line">    <span class="keyword">for</span> (element: T <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        accumulator = combine(accumulator, element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> accumulator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">val</span> items = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambdas are code blocks enclosed in curly braces.</span></span><br><span class="line">items.fold(<span class="number">0</span>, &#123; </span><br><span class="line">    <span class="comment">// When a lambda has parameters, they go first, followed by &#x27;-&gt;&#x27;</span></span><br><span class="line">    acc: <span class="built_in">Int</span>, i: <span class="built_in">Int</span> -&gt; </span><br><span class="line">    print(<span class="string">&quot;acc = <span class="variable">$acc</span>, i = <span class="variable">$i</span>, &quot;</span>) </span><br><span class="line">    <span class="keyword">val</span> result = acc + i</span><br><span class="line">    println(<span class="string">&quot;result = <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// The last expression in a lambda is considered the return value:</span></span><br><span class="line">    result</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parameter types in a lambda are optional if they can be inferred:</span></span><br><span class="line"><span class="keyword">val</span> joinedToString = items.fold(<span class="string">&quot;Elements:&quot;</span>, &#123; acc, i -&gt; acc + <span class="string">&quot; &quot;</span> + i &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function references can also be used for higher-order function calls:</span></span><br><span class="line"><span class="keyword">val</span> product = items.fold(<span class="number">1</span>, <span class="built_in">Int</span>::times)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">acc = 0, i = 1, result = 1</span></span><br><span class="line"><span class="comment">acc = 1, i = 2, result = 3</span></span><br><span class="line"><span class="comment">acc = 3, i = 3, result = 6</span></span><br><span class="line"><span class="comment">acc = 6, i = 4, result = 10</span></span><br><span class="line"><span class="comment">acc = 10, i = 5, result = 15</span></span><br><span class="line"><span class="comment">joinedToString = Elements: 1 2 3 4 5</span></span><br><span class="line"><span class="comment">product = 120</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="2-扩展函数"><a href="#2-扩展函数" class="headerlink" title="2. 扩展函数"></a>2. 扩展函数</h2><p>可以为已有的类添加方法，使其有新的功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 Boolean 值转成 0 或 1</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="built_in">Boolean</span>.<span class="title">toInt</span><span class="params">()</span></span> = <span class="keyword">if</span> (<span class="keyword">this</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">True.toInt()</span><br></pre></td></tr></table></figure><h2 id="3-let-run-also-apply-with-的使用"><a href="#3-let-run-also-apply-with-的使用" class="headerlink" title="3. let, run, also, apply, with 的使用"></a>3. let, run, also, apply, with 的使用</h2><h3 id="3-1-let"><a href="#3-1-let" class="headerlink" title="3.1 let"></a>3.1 let</h3><p><code>let</code> 最后一行是<code>let</code>代码块的返回值，如果最后一行是一个值，则<code>let</code>有返回值，否则是一个<code>Unit</code>，即无返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = name.let &#123;</span><br><span class="line">    it.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a = 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = name.let &#123;</span><br><span class="line">    it.length</span><br><span class="line">    print(<span class="string">&quot;xyz&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unit</span></span><br></pre></td></tr></table></figure><p><code>let</code>的代码块里带有一个内置的<code>it</code>实例，代表调用<code>let</code>代码块的实例本身</p><h3 id="3-2-run"><a href="#3-2-run" class="headerlink" title="3.2 run"></a>3.2 run</h3><p><code>run</code> 和 <code>let</code> 类似，不过没有了<code>it</code>，可以再代码块里直接访问实例本身的属性，同样最后一行是返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = name.run &#123;</span><br><span class="line">    length</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a = 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = name.run &#123;</span><br><span class="line">    length</span><br><span class="line">    print(<span class="string">&quot;xyz&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unit</span></span><br></pre></td></tr></table></figure><h3 id="3-3-also"><a href="#3-3-also" class="headerlink" title="3.3 also"></a>3.3 also</h3><p><code>also</code>和<code>let</code>类似，只不过不需要指定返回，默认返回实例本身，所以多数情况下<code>let</code>和<code>also</code>可以相互替换。 <code>also</code>同样含有<code>it</code>指向调用实例本身</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> count = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = count.also &#123;</span><br><span class="line">    it + <span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;xyz&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(result) <span class="comment">// result = 10</span></span><br></pre></td></tr></table></figure><h3 id="3-4-apply"><a href="#3-4-apply" class="headerlink" title="3.4 apply"></a>3.4 apply</h3><p><code>apply</code>和<code>run</code>类似，无需指定返回值，相比于<code>also</code>, <code>apply</code>可以直接使用实例的属性；相比于<code>run</code>，无需指定返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = name.apply &#123;</span><br><span class="line">    plus(<span class="string">&quot;a&quot;</span>) <span class="comment">// 返回了新的值，并没有改变原来的 name。 result 不会改变</span></span><br><span class="line">    <span class="comment">// name = plus(&quot;a&quot;) // 再赋值给name = plus(&quot;a&quot;)， name的值会改变，result 的值不会改变</span></span><br><span class="line">    println(length + <span class="number">1</span>) <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(result) <span class="comment">// “Jack”</span></span><br><span class="line">println(name) <span class="comment">// 如果是 name = plus(&quot;a&quot;),则 name = &quot;Jacka&quot;，如果没有重新赋值，则name的值不变</span></span><br></pre></td></tr></table></figure><h3 id="3-5-with"><a href="#3-5-with" class="headerlink" title="3.5 with"></a>3.5 with</h3><p><code>with</code>用于改变实例的属性，而无需使用<code>.</code>来调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> gender: String)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> person = Person(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;male&quot;</span>)</span><br><span class="line"></span><br><span class="line">with(person) &#123;</span><br><span class="line">    name = <span class="string">&quot;Rose&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;female&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(person) <span class="comment">// Person(name=Rose, gender=female)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Functional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA Skills</title>
      <link href="/2020/09/09/idea-skills/"/>
      <url>/2020/09/09/idea-skills/</url>
      
        <content type="html"><![CDATA[<p>记录下在使用<code>IDEA</code>时，常用或者觉得比较有用的操作技巧，便于后期的回顾和查阅。</p><a id="more"></a><h2 id="1-IDEA-剪切板"><a href="#1-IDEA-剪切板" class="headerlink" title="1. IDEA 剪切板"></a>1. IDEA 剪切板</h2><p>快捷键<code>command + shift + v</code>, 可以查看 idea 剪切板的近 100 条记录</p><h2 id="2-快速命名新建的变量"><a href="#2-快速命名新建的变量" class="headerlink" title="2. 快速命名新建的变量"></a>2. 快速命名新建的变量</h2><h3 id="方式1：-val-或者-var"><a href="#方式1：-val-或者-var" class="headerlink" title="方式1： .val 或者 .var"></a>方式1： <code>.val</code> 或者 <code>.var</code></h3><p>在新创建的对象后面添加<code>.val</code> or <code>.var</code>，然后点击<code>Tab</code>或者<code>Command</code>，能够弹出新建变量的选项，有助于快速命名变量<br><img src="/images/idea/idea_skill_val.gif"></p><p>对于<code>.val</code>，在<code>Java</code>工程中，需要结合<code>lombok</code>使用；而在<code>kotlin</code>项目中，因为<code>kotlin</code>语言有<code>.val</code>来声明一个不会改变的变量，则会生成<code>val xx = xxx</code>形式的代码；</p><p>对于<code>.var</code>，在<code>Java</code>工程中，生成<code>对象 + 变量名</code>的形式；在<code>kotlin</code>中，则是<code>var xx = xxx</code>的形式。</p><p>总的来说，在<code>Java</code>工程中，<code>.var</code>更实用，而在<code>kotlin</code>工程中，<code>val</code>和<code>var</code>都比较实用，具体看想要声明的变量是否为可变化的，不可变，则使用<code>.val</code>，可变，则使用<code>.var</code>。</p><h3 id="3-方式2：快捷键"><a href="#3-方式2：快捷键" class="headerlink" title="3. 方式2：快捷键"></a>3. 方式2：快捷键</h3><p><code>option + command + v</code> ，<br><img src="/images/idea/idea_skill_keymap_ocv.gif"></p><h2 id="4-Live-Templates"><a href="#4-Live-Templates" class="headerlink" title="4. Live Templates"></a>4. Live Templates</h2><p><code>IDEA</code>的<code>Live Templates</code>可以快速生成指定模板的代码。<code>IDEA</code>已经内置了一些 template，例如 参数的打印，参数是否为空的判断等，通过对应输入对应的缩写（abbreviation）,然后<code>Enter</code>或者<code>Tab</code>来生成所需的代码。</p><h4 id="打印参数"><a href="#打印参数" class="headerlink" title="打印参数"></a>打印参数</h4><p><img src="/images/idea/idea_skill_live_templates_soutv.gif"></p><h4 id="判读参数是否为空"><a href="#判读参数是否为空" class="headerlink" title="判读参数是否为空"></a>判读参数是否为空</h4><p><img src="/images/idea/idea_skill_live_templates_ifn.gif"></p><h4 id="判读参数是否不为空"><a href="#判读参数是否不为空" class="headerlink" title="判读参数是否不为空"></a>判读参数是否不为空</h4><p><img src="/images/idea/idea_skill_live_templates_inn.gif"></p><p>除了 IDEA 自带的 Templates，用户还可以进行自定义。</p><h2 id="5-快速选择相同内容，并启动多区域编辑"><a href="#5-快速选择相同内容，并启动多区域编辑" class="headerlink" title="5. 快速选择相同内容，并启动多区域编辑"></a>5. 快速选择相同内容，并启动多区域编辑</h2><p>当单个代码文件中有多个相同地方需要修改时，可以使用快捷键<code>control + command + g</code><br><img src="/images/idea/idea_skill_same_text_edit.gif"></p><h2 id="6-将内容放在一行"><a href="#6-将内容放在一行" class="headerlink" title="6. 将内容放在一行"></a>6. 将内容放在一行</h2><p>当想把多行内容放在一行中显示时，可以使用快捷键 <code>control + shift + j</code><br><img src="/images/idea/idea_skill_one_line.gif"></p><h2 id="7-打印变量时指定变量名称"><a href="#7-打印变量时指定变量名称" class="headerlink" title="7. 打印变量时指定变量名称"></a>7. 打印变量时指定变量名称</h2><p>在代码调试的时候，常会遇到打印出某个变量的场景，如果打印的时候不给变量起名字或者指定文本，在控制台不容易定位到打印的信息，而手动去写有时并不方便，此时可以使用<code>soutv</code>，然后按下<code>tab</code>，就会自动选择要打印的变量，并填写好前缀。<br><img src="/images/idea/idea_skill_print_variable.gif"></p><p><code>soutv</code>其实是<code>IDEA</code>内置的一个<code>live tempalte</code>，通过添加自定义的 template ，可以提升编码的效率。</p><h2 id="8-快速定位到编译错误的位置"><a href="#8-快速定位到编译错误的位置" class="headerlink" title="8. 快速定位到编译错误的位置"></a>8. 快速定位到编译错误的位置</h2><p><code>F2</code> 定位到下一个错误</p><p><code>Shift + F2</code> 定位到上一个错误</p><h2 id="9-移动光标到文本开头"><a href="#9-移动光标到文本开头" class="headerlink" title="9. 移动光标到文本开头"></a>9. 移动光标到文本开头</h2><p><code>fn + command + ←</code></p><p>对应<code>IDEA</code>里的操作：<code>Move Caret to Text Start</code></p><p>在<code>IDEA</code>里，Mac系统级别的移动至文本开头<code>Command + ↑</code>和结尾<code>Command + ↓</code>被指定给了其他操作。</p><h2 id="10-移动光标到文本结尾"><a href="#10-移动光标到文本结尾" class="headerlink" title="10. 移动光标到文本结尾"></a>10. 移动光标到文本结尾</h2><p><code>fn + command + →</code></p><p>对应<code>IDEA</code>里的操作：<code>Move Caret to Text End</code></p><h2 id="11-每次仅-run-单个单元测试case"><a href="#11-每次仅-run-单个单元测试case" class="headerlink" title="11. 每次仅 run 单个单元测试case"></a>11. 每次仅 run 单个单元测试case</h2><p>当 idea 里打开的是一个 gradle 项目时，默认在run tests 时，使用的是 gradle，这个时候它不能通过点击 idea 侧边的run按钮来仅run当前的case，每次会将当前单元测试类里的所有case都跑一遍。<br>在 <code>Preferences</code> -&gt; <code>Build,Execution,Deployment</code> -&gt; <code>Build Tools</code> -&gt; <code>Gradle</code> -&gt; <code>Run tests using</code> 将其改为 <code>IntelliJ IDEA</code>，就能够 run 某个 case。</p><p><img src="/images/idea/idea_skill_run_single_unit_test_case.png"></p><p>也可以选择 <code>Choose per test</code>, 启用后，在每次run时会提示选择用那种方式去run当前的case。</p>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code Skills</title>
      <link href="/2020/09/08/vscode-skills/"/>
      <url>/2020/09/08/vscode-skills/</url>
      
        <content type="html"><![CDATA[<p>去年的时候，开始使用<code>Visual Studio Code</code>来作为我的日常文本编辑器。之前一直都是使用<code>Sublime</code>来完成文本编辑，个人觉得<code>Sublime</code>已经比较好用。一方面为了尝试新东西，另一方面<code>Visual Studio Code</code>着实强大，拥有数量庞大的插件，作为日常<code>IDE</code>也不在话下。</p><a id="more"></a><p>但有一点，没能掌握<code>Visual Studio Code</code>本身的快捷键，还是比较习惯<code>Sublime</code>的操作，可能是肌肉记忆吧，也可能是太多软件的快捷键容易搞混，比如<code>IDEA</code>, <code>Sublime</code>, <code>Visual Studio Code</code>, 来回切换的使用，时常记不起或者记不清该怎么按快捷键。 所以在<code>Visual Studio Code</code>就设置的是<code>Sublime</code>的快捷键，<code>Sublime</code>的使用也就比较少了，偶尔忘记快捷键或者觉得快捷键在<code>Visual Studio Code</code>里不起作用时，会打开<code>Sublime</code>来辅助一下。</p><h4 id="通过命令行打开某目录"><a href="#通过命令行打开某目录" class="headerlink" title="通过命令行打开某目录"></a>通过命令行打开某目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> [folder]</span><br><span class="line">$ code -n .</span><br></pre></td></tr></table></figure><p><code>-n</code> is for new windows, it’s a default behavior</p><h4 id="通过命令行打开某文件"><a href="#通过命令行打开某文件" class="headerlink" title="通过命令行打开某文件"></a>通过命令行打开某文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ code -n test.txt</span><br></pre></td></tr></table></figure><p>以上命令表示在新的窗口打开名为<code>test.txt</code>的文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog supported by Hexo</title>
      <link href="/2020/09/07/blog_hexo_init/"/>
      <url>/2020/09/07/blog_hexo_init/</url>
      
        <content type="html"><![CDATA[<p>这不是我第一次搭建<code>Github Pages</code>，可能是第三次了。记得上次搭建是在<code>Windows</code>系统上完成的，但后来换了笔记本，疏于维护，原来的文档并没有很好的保存，这里只能重新搭建一次。</p><p>本文是在 Mac 系统下，搭建 Hexo 支持的博客系统，事先需要安装好<code>Ruby</code>和<code>npm</code>相关依赖。</p><a id="more"></a><h2 id="1-安装-hexo-并初始化项目"><a href="#1-安装-hexo-并初始化项目" class="headerlink" title="1. 安装 hexo, 并初始化项目"></a>1. 安装 <code>hexo</code>, 并初始化项目</h2><h3 id="假设项目名称为blog"><a href="#假设项目名称为blog" class="headerlink" title="假设项目名称为blog"></a>假设项目名称为<code>blog</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog </span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><blockquote><p> <a href="https://hexo.io/docs/commands">Hexo commands</a></p></blockquote><h2 id="2-安装主题"><a href="#2-安装主题" class="headerlink" title="2. 安装主题"></a>2. 安装主题</h2><p>主题以<a href="https://github.com/tufu9441/maupassant-hexo"><code>maupassant</code></a>为例进行安装</p><h3 id="步骤1：下载并安装主题"><a href="#步骤1：下载并安装主题" class="headerlink" title="步骤1：下载并安装主题"></a>步骤1：下载并安装主题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-pug --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-sass --save</span></span><br></pre></td></tr></table></figure><h3 id="步骤2：应用主题至项目"><a href="#步骤2：应用主题至项目" class="headerlink" title="步骤2：应用主题至项目"></a>步骤2：应用主题至项目</h3><p>在项目的 <code>_config.yml</code> 中，修改 <code>theme: landscape</code> 为 <code>theme: maupassant</code>, 保存后 <code>hexo server</code> 运行，查看效果</p><blockquote><p>self_search - A jQuery-based local search engine, with the dependency on the plugin hexo-generator-search</p></blockquote><h2 id="3-主题自定义"><a href="#3-主题自定义" class="headerlink" title="3. 主题自定义"></a>3. 主题自定义</h2><h3 id="3-1-禁用部分页面，目前还未添加相应的页面，可以先禁用"><a href="#3-1-禁用部分页面，目前还未添加相应的页面，可以先禁用" class="headerlink" title="3.1 禁用部分页面，目前还未添加相应的页面，可以先禁用"></a>3.1 禁用部分页面，目前还未添加相应的页面，可以先禁用</h3><p>理论上，应用完主题之后就可以正常访问博客了，但由于部分页面未提供，这里先注释这一部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># - page: about</span></span><br><span class="line"><span class="comment">#   directory: about/</span></span><br><span class="line"><span class="comment">#   icon: fa-user</span></span><br><span class="line"><span class="comment"># - page: rss</span></span><br><span class="line"><span class="comment">#   directory: atom.xml≥</span></span><br><span class="line"><span class="comment">#   icon: fa-rss</span></span><br></pre></td></tr></table></figure><h3 id="3-2-开启-self-search"><a href="#3-2-开启-self-search" class="headerlink" title="3.2 开启 self_search"></a>3.2 开启 <code>self_search</code></h3><p><code>self_search</code>的功能需要<code>hexo-generator-search</code>插件的帮助。开启后，可以通过关键词搜索到文章。</p><h4 id="步骤1：安装-hexo-generator-search-插件"><a href="#步骤1：安装-hexo-generator-search-插件" class="headerlink" title="步骤1：安装 hexo-generator-search 插件"></a>步骤1：安装 <a href="https://github.com/wzpan/hexo-generator-search"><code>hexo-generator-search</code></a> 插件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h4 id="步骤2：-Options-configuration-in-config-yml-file"><a href="#步骤2：-Options-configuration-in-config-yml-file" class="headerlink" title="步骤2： Options configuration in _config.yml file"></a>步骤2： Options configuration in <code>_config.yml</code> file</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">    <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="步骤3：-启用-self-search"><a href="#步骤3：-启用-self-search" class="headerlink" title="步骤3： 启用 self_search"></a>步骤3： 启用 <code>self_search</code></h4><p>修改<code>maupassant</code>主题目录下的<code>_config.yml</code>, 修改<code>self_search: true</code></p><h2 id="4-写文章"><a href="#4-写文章" class="headerlink" title="4. 写文章"></a>4. 写文章</h2><h3 id="4-1-新建文章"><a href="#4-1-新建文章" class="headerlink" title="4.1 新建文章"></a>4.1 新建文章</h3><h4 id="方式1-手动在-source-post-目录项创建-Markdown-文件"><a href="#方式1-手动在-source-post-目录项创建-Markdown-文件" class="headerlink" title="方式1. 手动在 source/_post 目录项创建 Markdown 文件"></a>方式1. 手动在 <code>source/_post</code> 目录项创建 <code>Markdown</code> 文件</h4><h4 id="方式2-使用命令创建，无需指定文件类型"><a href="#方式2-使用命令创建，无需指定文件类型" class="headerlink" title="方式2. 使用命令创建，无需指定文件类型"></a>方式2. 使用命令创建，无需指定文件类型</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new xxx </span><br></pre></td></tr></table></figure><p>默认将新建的文件放置在<code>_post</code> 目录下，可以通过修改<code>default_layout</code> in <code>_config_yml</code> 指向其他目录，或者手动指定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft xxx </span><br></pre></td></tr></table></figure><p>这样，新建的文件就会放置在<code>draft</code>目录下，且不用关心该目录是否存在</p><h3 id="4-2-多标签设置"><a href="#4-2-多标签设置" class="headerlink" title="4.2 多标签设置"></a>4.2 多标签设置</h3><p>在文章的顶部区域，配置 <code>tags: [tag1, tag2]</code> 即可。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Blog supported by Hexo</span><br><span class="line">date: 2020-09-07 23:04:55</span><br><span class="line">tags: [Hexo, maupassant]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="4-3-图片引用"><a href="#4-3-图片引用" class="headerlink" title="4.3 图片引用"></a>4.3 图片引用</h3><h4 id="4-3-1-来自网络"><a href="#4-3-1-来自网络" class="headerlink" title="4.3.1 来自网络"></a>4.3.1 来自网络</h4><p>填写图片链接，直接引用 <code>![](url)</code></p><h4 id="4-3-2-来自本地"><a href="#4-3-2-来自本地" class="headerlink" title="4.3.2 来自本地"></a>4.3.2 来自本地</h4><p>可以在<code>source</code>目录下创建 images 目录，用于存放文章所需图片，然后在文章里引用: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>除了将图片放在<code>source</code>, 还可以将图片放置在文章所在目录，例如<code>_post</code>, 修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这样在创建通过命令<code>hexo new blog_name</code>时，会在<code>_post</code>目录下生成<code>blog_name.md</code>和<code>blog_name</code>文件夹，可以将图片放置在<code>blog_name</code> 目录下。<br>当然，手动创建该文件夹也可以。</p><p>注意：hexo 的图片最终渲染出来的路径与source里的路径有些不一致，会造成在markdown里能预览，但是在网页中不能预览的情况，可以使用<code>hexo-assert-image</code>插件来辅助解决，或者求其次仅保证在网页端可以预览。</p><h2 id="5-文章发布"><a href="#5-文章发布" class="headerlink" title="5. 文章发布"></a>5. 文章发布</h2><h4 id="步骤1：-修改项目配置文件-config-yml，配置上自己GitHub的地址"><a href="#步骤1：-修改项目配置文件-config-yml，配置上自己GitHub的地址" class="headerlink" title="步骤1： 修改项目配置文件_config.yml，配置上自己GitHub的地址"></a>步骤1： 修改项目配置文件<code>_config.yml</code>，配置上自己GitHub的地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:mjz9054&#x2F;mjz9054.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><code>repository</code>可以配置<code>https</code>，也可以配置<code>ssh</code>的地址</p><h4 id="步骤2：-安装-hexo-deployer-git-插件"><a href="#步骤2：-安装-hexo-deployer-git-插件" class="headerlink" title="步骤2： 安装 hexo-deployer-git 插件"></a>步骤2： 安装 hexo-deployer-git 插件</h4><p>自动部署需要<code>hexo-deployer-git</code>插件的帮助，否则不能自动找到<code>Git</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-deployer-git</span><br></pre></td></tr></table></figure><p>相关命令：<br>发布文章至GitHub</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="comment"># 或简写 hexo d</span></span><br></pre></td></tr></table></figure><p>本地预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment"># 或简写 hexo s </span></span><br></pre></td></tr></table></figure><p>执行命令后，可以访问 <a href="localhost:4000">localhost:4000</a>，进行预览</p><h2 id="6-源文件管理"><a href="#6-源文件管理" class="headerlink" title="6. 源文件管理"></a>6. 源文件管理</h2><h4 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git init </span><br><span class="line">$ git remote add origin git@github.com:mjz9054/mjz9054.github.io.git</span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:mjz9054/mjz9054.github.io.git (fetch)</span><br><span class="line">origingit@github.com:mjz9054/mjz9054.github.io.git (push)</span><br></pre></td></tr></table></figure><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>将源文件放置在分支上，<code>master</code>用于静态文件的存放.<br>分支<code>gh-pages</code>是 GitHub pages 的 tutorial 中提到的存放源文件的分支名，可以使用这个名字也可以不使用，自己能明白新建分支的意义即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --orphan gh-pages</span><br></pre></td></tr></table></figure><h4 id="将文件推送至分支"><a href="#将文件推送至分支" class="headerlink" title="将文件推送至分支"></a>将文件推送至分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --<span class="built_in">set</span>-upstream origin gh-pages</span><br></pre></td></tr></table></figure><p>需要在远端创建分支，需要加上额外参数，之后的推送就不需要了。</p><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h2><h3 id="Hexo-tag-plugin"><a href="#Hexo-tag-plugin" class="headerlink" title="Hexo tag plugin"></a>Hexo tag plugin</h3><blockquote><p><a href="https://hexo.io/docs/tag-plugins.html">https://hexo.io/docs/tag-plugins.html</a></p></blockquote><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><ul><li>codeblock</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">alert(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>youtube<div class="video-container"><iframe src="https://www.youtube.com/embed/lJIrF4YjHfQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> maupassant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/09/07/hello-world/"/>
      <url>/2020/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

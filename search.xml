<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kotlin skills</title>
      <link href="/2020/09/10/kotlin-skills/"/>
      <url>/2020/09/10/kotlin-skills/</url>
      
        <content type="html"><![CDATA[<h2 id="1-functions-as-parameters-（函数作为入参）"><a href="#1-functions-as-parameters-（函数作为入参）" class="headerlink" title="1. functions as parameters （函数作为入参）"></a>1. functions as parameters （函数作为入参）</h2><p>假设有两个数，要将他们合并为一个数，合并的方式不同，此时就可以使用函数入参的方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> Collection<span class="type">&lt;T&gt;</span>.<span class="title">fold</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    initial: <span class="type">R</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    combine: (<span class="type">acc</span>: <span class="type">R</span>, <span class="type">nextElement</span>: <span class="type">T</span>) -&gt; <span class="type">R</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: R &#123;</span><br><span class="line">    <span class="keyword">var</span> accumulator: R = initial</span><br><span class="line">    <span class="keyword">for</span> (element: T <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        accumulator = combine(accumulator, element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> accumulator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">val</span> items = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambdas are code blocks enclosed in curly braces.</span></span><br><span class="line">items.fold(<span class="number">0</span>, &#123; </span><br><span class="line">    <span class="comment">// When a lambda has parameters, they go first, followed by &#x27;-&gt;&#x27;</span></span><br><span class="line">    acc: <span class="built_in">Int</span>, i: <span class="built_in">Int</span> -&gt; </span><br><span class="line">    print(<span class="string">&quot;acc = <span class="variable">$acc</span>, i = <span class="variable">$i</span>, &quot;</span>) </span><br><span class="line">    <span class="keyword">val</span> result = acc + i</span><br><span class="line">    println(<span class="string">&quot;result = <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// The last expression in a lambda is considered the return value:</span></span><br><span class="line">    result</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parameter types in a lambda are optional if they can be inferred:</span></span><br><span class="line"><span class="keyword">val</span> joinedToString = items.fold(<span class="string">&quot;Elements:&quot;</span>, &#123; acc, i -&gt; acc + <span class="string">&quot; &quot;</span> + i &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function references can also be used for higher-order function calls:</span></span><br><span class="line"><span class="keyword">val</span> product = items.fold(<span class="number">1</span>, <span class="built_in">Int</span>::times)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">acc = 0, i = 1, result = 1</span></span><br><span class="line"><span class="comment">acc = 1, i = 2, result = 3</span></span><br><span class="line"><span class="comment">acc = 3, i = 3, result = 6</span></span><br><span class="line"><span class="comment">acc = 6, i = 4, result = 10</span></span><br><span class="line"><span class="comment">acc = 10, i = 5, result = 15</span></span><br><span class="line"><span class="comment">joinedToString = Elements: 1 2 3 4 5</span></span><br><span class="line"><span class="comment">product = 120</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="2-扩展函数"><a href="#2-扩展函数" class="headerlink" title="2. 扩展函数"></a>2. 扩展函数</h2><p>可以为已有的类添加方法，使其有新的功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 Boolean 值转成 0 或 1</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="built_in">Boolean</span>.<span class="title">toInt</span><span class="params">()</span></span> = <span class="keyword">if</span> (<span class="keyword">this</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">True.toInt()</span><br></pre></td></tr></table></figure><h2 id="3-let-run-also-apply-with-的使用"><a href="#3-let-run-also-apply-with-的使用" class="headerlink" title="3. let, run, also, apply, with 的使用"></a>3. let, run, also, apply, with 的使用</h2><h3 id="3-1-let"><a href="#3-1-let" class="headerlink" title="3.1 let"></a>3.1 let</h3><p><code>let</code> 最后一行是<code>let</code>代码块的返回值，如果最后一行是一个值，则<code>let</code>有返回值，否则是一个<code>Unit</code>，即无返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = name.let &#123;</span><br><span class="line">    it.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a = 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = name.let &#123;</span><br><span class="line">    it.length</span><br><span class="line">    print(<span class="string">&quot;xyz&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unit</span></span><br></pre></td></tr></table></figure><p><code>let</code>的代码块里带有一个内置的<code>it</code>实例，代表调用<code>let</code>代码块的实例本身</p><h3 id="3-2-run"><a href="#3-2-run" class="headerlink" title="3.2 run"></a>3.2 run</h3><p><code>run</code> 和 <code>let</code> 类似，不过没有了<code>it</code>，可以再代码块里直接访问实例本身的属性，同样最后一行是返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = name.run &#123;</span><br><span class="line">    length</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a = 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = name.run &#123;</span><br><span class="line">    length</span><br><span class="line">    print(<span class="string">&quot;xyz&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unit</span></span><br></pre></td></tr></table></figure><h3 id="3-3-also"><a href="#3-3-also" class="headerlink" title="3.3 also"></a>3.3 also</h3><p><code>also</code>和<code>let</code>类似，只不过不需要指定返回，默认返回实例本身，所以多数情况下<code>let</code>和<code>also</code>可以相互替换。 <code>also</code>同样含有<code>it</code>指向调用实例本身</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> count = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = count.also &#123;</span><br><span class="line">    it + <span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;xyz&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(result) <span class="comment">// result = 10</span></span><br></pre></td></tr></table></figure><h3 id="3-4-apply"><a href="#3-4-apply" class="headerlink" title="3.4 apply"></a>3.4 apply</h3><p><code>apply</code>和<code>run</code>类似，无需指定返回值，相比于<code>also</code>, <code>apply</code>可以直接使用实例的属性；相比于<code>run</code>，无需指定返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = name.apply &#123;</span><br><span class="line">    plus(<span class="string">&quot;a&quot;</span>) <span class="comment">// 返回了新的值，并没有改变原来的 name。 result 不会改变</span></span><br><span class="line">    <span class="comment">// name = plus(&quot;a&quot;) // 再赋值给name = plus(&quot;a&quot;)， name的值会改变，result 的值不会改变</span></span><br><span class="line">    println(length + <span class="number">1</span>) <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(result) <span class="comment">// “Jack”</span></span><br><span class="line">println(name) <span class="comment">// 如果是 name = plus(&quot;a&quot;),则 name = &quot;Jacka&quot;，如果没有重新赋值，则name的值不变</span></span><br></pre></td></tr></table></figure><h3 id="3-5-with"><a href="#3-5-with" class="headerlink" title="3.5 with"></a>3.5 with</h3><p><code>with</code>用于改变实例的属性，而无需使用<code>.</code>来调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> gender: String)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> person = Person(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;male&quot;</span>)</span><br><span class="line"></span><br><span class="line">with(person) &#123;</span><br><span class="line">    name = <span class="string">&quot;Rose&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;female&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(person) <span class="comment">// Person(name=Rose, gender=female)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Functional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA Skills</title>
      <link href="/2020/09/09/idea-skills/"/>
      <url>/2020/09/09/idea-skills/</url>
      
        <content type="html"><![CDATA[<h2 id="1-IDEA-剪切板"><a href="#1-IDEA-剪切板" class="headerlink" title="1. IDEA 剪切板"></a>1. IDEA 剪切板</h2><p>快捷键<code>command + shift + v</code>, 可以查看 idea 剪切板的近 100 条记录</p><h2 id="2-快速命名新建的对象"><a href="#2-快速命名新建的对象" class="headerlink" title="2. 快速命名新建的对象"></a>2. 快速命名新建的对象</h2><p>在新创建的对象后面添加<code>.val</code>，然后点击<code>Tab</code>或者<code>Command</code>，能够弹出新建变量的选项，有助于快速命名变量<br><img src="/images/idea_skill_val.gif"></p><p>快捷键 <code>option + command + v</code> ，<br><img src="/images/idea_keymap_ocv.gif"></p><h2 id="3-live-template"><a href="#3-live-template" class="headerlink" title="3. live template"></a>3. live template</h2><h2 id="4-Extract"><a href="#4-Extract" class="headerlink" title="4. Extract"></a>4. Extract</h2>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode skills</title>
      <link href="/2020/09/08/vscode-skills/"/>
      <url>/2020/09/08/vscode-skills/</url>
      
        <content type="html"><![CDATA[<h4 id="通过命令行打开某目录"><a href="#通过命令行打开某目录" class="headerlink" title="通过命令行打开某目录"></a>通过命令行打开某目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> [folder]</span><br><span class="line">$ code -n .</span><br></pre></td></tr></table></figure><p><code>-n</code> is for new windows, it’s a default behavior</p><h4 id="通过命令行打开某文件"><a href="#通过命令行打开某文件" class="headerlink" title="通过命令行打开某文件"></a>通过命令行打开某文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ code -n test.txt</span><br></pre></td></tr></table></figure><p>以上命令表示在新的窗口打开名为<code>test.txt</code>的文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog supported by Hexo</title>
      <link href="/2020/09/07/blog_hexo_init/"/>
      <url>/2020/09/07/blog_hexo_init/</url>
      
        <content type="html"><![CDATA[<p>本文是在 Mac 系统下，搭建 Hexo 支持的博客系统，事先需要安装好<code>Ruby</code>和<code>npm</code>相关依赖。</p><h2 id="1-安装-hexo-并初始化项目"><a href="#1-安装-hexo-并初始化项目" class="headerlink" title="1. 安装 hexo, 并初始化项目"></a>1. 安装 <code>hexo</code>, 并初始化项目</h2><h3 id="假设项目名称为blog"><a href="#假设项目名称为blog" class="headerlink" title="假设项目名称为blog"></a>假设项目名称为<code>blog</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog </span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><blockquote><p> <a href="https://hexo.io/docs/commands">Hexo commands</a></p></blockquote><h2 id="2-安装主题"><a href="#2-安装主题" class="headerlink" title="2. 安装主题"></a>2. 安装主题</h2><p>主题以<a href="https://github.com/tufu9441/maupassant-hexo"><code>maupassant</code></a>为例进行安装</p><h3 id="步骤1：下载并安装主题"><a href="#步骤1：下载并安装主题" class="headerlink" title="步骤1：下载并安装主题"></a>步骤1：下载并安装主题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-pug --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-sass --save</span></span><br></pre></td></tr></table></figure><h3 id="步骤2：应用主题至项目"><a href="#步骤2：应用主题至项目" class="headerlink" title="步骤2：应用主题至项目"></a>步骤2：应用主题至项目</h3><p>在项目的 <code>_config.yml</code> 中，修改 <code>theme: landscape</code> 为 <code>theme: maupassant</code>, 保存后 <code>hexo server</code> 运行，查看效果</p><blockquote><p>self_search - A jQuery-based local search engine, with the dependency on the plugin hexo-generator-search</p></blockquote><h2 id="3-主题自定义"><a href="#3-主题自定义" class="headerlink" title="3. 主题自定义"></a>3. 主题自定义</h2><h3 id="3-1-禁用部分页面，目前还未添加相应的页面，可以先禁用"><a href="#3-1-禁用部分页面，目前还未添加相应的页面，可以先禁用" class="headerlink" title="3.1 禁用部分页面，目前还未添加相应的页面，可以先禁用"></a>3.1 禁用部分页面，目前还未添加相应的页面，可以先禁用</h3><p>理论上，应用完主题之后就可以正常访问博客了，但由于部分页面未提供，这里先注释这一部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># - page: about</span></span><br><span class="line"><span class="comment">#   directory: about/</span></span><br><span class="line"><span class="comment">#   icon: fa-user</span></span><br><span class="line"><span class="comment"># - page: rss</span></span><br><span class="line"><span class="comment">#   directory: atom.xml≥</span></span><br><span class="line"><span class="comment">#   icon: fa-rss</span></span><br></pre></td></tr></table></figure><h3 id="3-2-开启-self-search"><a href="#3-2-开启-self-search" class="headerlink" title="3.2 开启 self_search"></a>3.2 开启 <code>self_search</code></h3><p><code>self_search</code>的功能需要<code>hexo-generator-search</code>插件的帮助。开启后，可以通过关键词搜索到文章。</p><h4 id="步骤1：安装-hexo-generator-search-插件"><a href="#步骤1：安装-hexo-generator-search-插件" class="headerlink" title="步骤1：安装 hexo-generator-search 插件"></a>步骤1：安装 <a href="https://github.com/wzpan/hexo-generator-search"><code>hexo-generator-search</code></a> 插件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h4 id="步骤2：-Options-configuration-in-config-yml-file"><a href="#步骤2：-Options-configuration-in-config-yml-file" class="headerlink" title="步骤2： Options configuration in _config.yml file"></a>步骤2： Options configuration in <code>_config.yml</code> file</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">    <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="步骤3：-启用-self-search"><a href="#步骤3：-启用-self-search" class="headerlink" title="步骤3： 启用 self_search"></a>步骤3： 启用 <code>self_search</code></h4><p>修改<code>maupassant</code>主题目录下的<code>_config.yml</code>, 修改<code>self_search: true</code></p><h2 id="4-写文章"><a href="#4-写文章" class="headerlink" title="4. 写文章"></a>4. 写文章</h2><h3 id="4-1-新建文章"><a href="#4-1-新建文章" class="headerlink" title="4.1 新建文章"></a>4.1 新建文章</h3><h4 id="方式1-手动在-source-post-目录项创建-Markdown-文件"><a href="#方式1-手动在-source-post-目录项创建-Markdown-文件" class="headerlink" title="方式1. 手动在 source/_post 目录项创建 Markdown 文件"></a>方式1. 手动在 <code>source/_post</code> 目录项创建 <code>Markdown</code> 文件</h4><h4 id="方式2-使用命令创建，无需指定文件类型"><a href="#方式2-使用命令创建，无需指定文件类型" class="headerlink" title="方式2. 使用命令创建，无需指定文件类型"></a>方式2. 使用命令创建，无需指定文件类型</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new xxx </span><br></pre></td></tr></table></figure><p>默认将新建的文件放置在<code>_post</code> 目录下，可以通过修改<code>default_layout</code> in <code>_config_yml</code> 指向其他目录，或者手动指定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft xxx </span><br></pre></td></tr></table></figure><p>这样，新建的文件就会放置在<code>draft</code>目录下，且不用关心该目录是否存在</p><h3 id="4-2-多标签设置"><a href="#4-2-多标签设置" class="headerlink" title="4.2 多标签设置"></a>4.2 多标签设置</h3><p>在文章的顶部区域，配置 <code>tags: [tag1, tag2]</code> 即可。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Blog supported by Hexo</span><br><span class="line">date: 2020-09-07 23:04:55</span><br><span class="line">tags: [Hexo, maupassant]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="4-3-图片引用"><a href="#4-3-图片引用" class="headerlink" title="4.3 图片引用"></a>4.3 图片引用</h3><h4 id="4-3-1-来自网络"><a href="#4-3-1-来自网络" class="headerlink" title="4.3.1 来自网络"></a>4.3.1 来自网络</h4><p>填写图片链接，直接引用 <code>![](url)</code></p><h4 id="4-3-2-来自本地"><a href="#4-3-2-来自本地" class="headerlink" title="4.3.2 来自本地"></a>4.3.2 来自本地</h4><p>可以在<code>source</code>目录下创建 images 目录，用于存放文章所需图片，然后在文章里引用: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>除了将图片放在<code>source</code>, 还可以将图片放置在文章所在目录，例如<code>_post</code>, 修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这样在创建通过命令<code>hexo new blog_name</code>时，会在<code>_post</code>目录下生成<code>blog_name.md</code>和<code>blog_name</code>文件夹，可以将图片放置在<code>blog_name</code> 目录下。<br>当然，手动创建该文件夹也可以。</p><p>注意：hexo 的图片最终渲染出来的路径与source里的路径有些不一致，会造成在markdown里能预览，但是在网页中不能预览的情况，可以使用<code>hexo-assert-image</code>插件来辅助解决，或者求其次仅保证在网页端可以预览。</p><h2 id="5-文章发布"><a href="#5-文章发布" class="headerlink" title="5. 文章发布"></a>5. 文章发布</h2><h4 id="步骤1：-修改项目配置文件-config-yml，配置上自己GitHub的地址"><a href="#步骤1：-修改项目配置文件-config-yml，配置上自己GitHub的地址" class="headerlink" title="步骤1： 修改项目配置文件_config.yml，配置上自己GitHub的地址"></a>步骤1： 修改项目配置文件<code>_config.yml</code>，配置上自己GitHub的地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:mjz9054&#x2F;mjz9054.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><code>repository</code>可以配置<code>https</code>，也可以配置<code>ssh</code>的地址</p><h4 id="步骤2：-安装-hexo-deployer-git-插件"><a href="#步骤2：-安装-hexo-deployer-git-插件" class="headerlink" title="步骤2： 安装 hexo-deployer-git 插件"></a>步骤2： 安装 hexo-deployer-git 插件</h4><p>自动部署需要<code>hexo-deployer-git</code>插件的帮助，否则不能自动找到<code>Git</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-deployer-git</span><br></pre></td></tr></table></figure><p>相关命令：<br>发布文章至GitHub</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="comment"># 或简写 hexo d</span></span><br></pre></td></tr></table></figure><p>本地预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment"># 或简写 hexo s </span></span><br></pre></td></tr></table></figure><p>执行命令后，可以访问 <a href="localhost:4000">localhost:4000</a>，进行预览</p><h2 id="6-源文件管理"><a href="#6-源文件管理" class="headerlink" title="6. 源文件管理"></a>6. 源文件管理</h2><h4 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git init </span><br><span class="line">$ git remote add origin git@github.com:mjz9054/mjz9054.github.io.git</span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:mjz9054/mjz9054.github.io.git (fetch)</span><br><span class="line">origingit@github.com:mjz9054/mjz9054.github.io.git (push)</span><br></pre></td></tr></table></figure><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>将源文件放置在分支上，<code>master</code>用于静态文件的存放.<br>分支<code>gh-pages</code>是 GitHub pages 的 tutorial 中提到的存放源文件的分支名，可以使用这个名字也可以不使用，自己能明白新建分支的意义即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --orphan gh-pages</span><br></pre></td></tr></table></figure><h4 id="将文件推送至分支"><a href="#将文件推送至分支" class="headerlink" title="将文件推送至分支"></a>将文件推送至分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --<span class="built_in">set</span>-upstream origin gh-pages</span><br></pre></td></tr></table></figure><p>需要在远端创建分支，需要加上额外参数，之后的推送就不需要了。</p><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h2><h3 id="Hexo-tag-plugin"><a href="#Hexo-tag-plugin" class="headerlink" title="Hexo tag plugin"></a>Hexo tag plugin</h3><blockquote><p><a href="https://hexo.io/docs/tag-plugins.html">https://hexo.io/docs/tag-plugins.html</a></p></blockquote><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><ul><li>codeblock</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">alert(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>youtube<div class="video-container"><iframe src="https://www.youtube.com/embed/lJIrF4YjHfQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> maupassant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/09/07/hello-world/"/>
      <url>/2020/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
